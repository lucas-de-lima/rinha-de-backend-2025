// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/rinha.proto

package rinha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RinhaService_Ping_FullMethodName              = "/rinha.RinhaService/Ping"
	RinhaService_ProcessPayment_FullMethodName    = "/rinha.RinhaService/ProcessPayment"
	RinhaService_GetPaymentSummary_FullMethodName = "/rinha.RinhaService/GetPaymentSummary"
)

// RinhaServiceClient is the client API for RinhaService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço principal da API Gateway
type RinhaServiceClient interface {
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error)
	GetPaymentSummary(ctx context.Context, in *GetPaymentSummaryRequest, opts ...grpc.CallOption) (*GetPaymentSummaryResponse, error)
}

type rinhaServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRinhaServiceClient(cc grpc.ClientConnInterface) RinhaServiceClient {
	return &rinhaServiceClient{cc}
}

func (c *rinhaServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, RinhaService_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinhaServiceClient) ProcessPayment(ctx context.Context, in *ProcessPaymentRequest, opts ...grpc.CallOption) (*ProcessPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProcessPaymentResponse)
	err := c.cc.Invoke(ctx, RinhaService_ProcessPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rinhaServiceClient) GetPaymentSummary(ctx context.Context, in *GetPaymentSummaryRequest, opts ...grpc.CallOption) (*GetPaymentSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentSummaryResponse)
	err := c.cc.Invoke(ctx, RinhaService_GetPaymentSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RinhaServiceServer is the server API for RinhaService service.
// All implementations must embed UnimplementedRinhaServiceServer
// for forward compatibility.
//
// Serviço principal da API Gateway
type RinhaServiceServer interface {
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error)
	GetPaymentSummary(context.Context, *GetPaymentSummaryRequest) (*GetPaymentSummaryResponse, error)
	mustEmbedUnimplementedRinhaServiceServer()
}

// UnimplementedRinhaServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRinhaServiceServer struct{}

func (UnimplementedRinhaServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRinhaServiceServer) ProcessPayment(context.Context, *ProcessPaymentRequest) (*ProcessPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessPayment not implemented")
}
func (UnimplementedRinhaServiceServer) GetPaymentSummary(context.Context, *GetPaymentSummaryRequest) (*GetPaymentSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentSummary not implemented")
}
func (UnimplementedRinhaServiceServer) mustEmbedUnimplementedRinhaServiceServer() {}
func (UnimplementedRinhaServiceServer) testEmbeddedByValue()                      {}

// UnsafeRinhaServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RinhaServiceServer will
// result in compilation errors.
type UnsafeRinhaServiceServer interface {
	mustEmbedUnimplementedRinhaServiceServer()
}

func RegisterRinhaServiceServer(s grpc.ServiceRegistrar, srv RinhaServiceServer) {
	// If the following call pancis, it indicates UnimplementedRinhaServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RinhaService_ServiceDesc, srv)
}

func _RinhaService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RinhaService_ProcessPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProcessPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaServiceServer).ProcessPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaService_ProcessPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaServiceServer).ProcessPayment(ctx, req.(*ProcessPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RinhaService_GetPaymentSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RinhaServiceServer).GetPaymentSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RinhaService_GetPaymentSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RinhaServiceServer).GetPaymentSummary(ctx, req.(*GetPaymentSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RinhaService_ServiceDesc is the grpc.ServiceDesc for RinhaService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RinhaService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rinha.RinhaService",
	HandlerType: (*RinhaServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RinhaService_Ping_Handler,
		},
		{
			MethodName: "ProcessPayment",
			Handler:    _RinhaService_ProcessPayment_Handler,
		},
		{
			MethodName: "GetPaymentSummary",
			Handler:    _RinhaService_GetPaymentSummary_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rinha.proto",
}

const (
	PaymentOrchestratorService_OrchestratePayment_FullMethodName = "/rinha.PaymentOrchestratorService/OrchestratePayment"
	PaymentOrchestratorService_GetPaymentStatus_FullMethodName   = "/rinha.PaymentOrchestratorService/GetPaymentStatus"
)

// PaymentOrchestratorServiceClient is the client API for PaymentOrchestratorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço interno de orquestração de pagamentos
type PaymentOrchestratorServiceClient interface {
	OrchestratePayment(ctx context.Context, in *OrchestratePaymentRequest, opts ...grpc.CallOption) (*OrchestratePaymentResponse, error)
	GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error)
}

type paymentOrchestratorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentOrchestratorServiceClient(cc grpc.ClientConnInterface) PaymentOrchestratorServiceClient {
	return &paymentOrchestratorServiceClient{cc}
}

func (c *paymentOrchestratorServiceClient) OrchestratePayment(ctx context.Context, in *OrchestratePaymentRequest, opts ...grpc.CallOption) (*OrchestratePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OrchestratePaymentResponse)
	err := c.cc.Invoke(ctx, PaymentOrchestratorService_OrchestratePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentOrchestratorServiceClient) GetPaymentStatus(ctx context.Context, in *GetPaymentStatusRequest, opts ...grpc.CallOption) (*GetPaymentStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentStatusResponse)
	err := c.cc.Invoke(ctx, PaymentOrchestratorService_GetPaymentStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PaymentOrchestratorServiceServer is the server API for PaymentOrchestratorService service.
// All implementations must embed UnimplementedPaymentOrchestratorServiceServer
// for forward compatibility.
//
// Serviço interno de orquestração de pagamentos
type PaymentOrchestratorServiceServer interface {
	OrchestratePayment(context.Context, *OrchestratePaymentRequest) (*OrchestratePaymentResponse, error)
	GetPaymentStatus(context.Context, *GetPaymentStatusRequest) (*GetPaymentStatusResponse, error)
	mustEmbedUnimplementedPaymentOrchestratorServiceServer()
}

// UnimplementedPaymentOrchestratorServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPaymentOrchestratorServiceServer struct{}

func (UnimplementedPaymentOrchestratorServiceServer) OrchestratePayment(context.Context, *OrchestratePaymentRequest) (*OrchestratePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OrchestratePayment not implemented")
}
func (UnimplementedPaymentOrchestratorServiceServer) GetPaymentStatus(context.Context, *GetPaymentStatusRequest) (*GetPaymentStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentStatus not implemented")
}
func (UnimplementedPaymentOrchestratorServiceServer) mustEmbedUnimplementedPaymentOrchestratorServiceServer() {
}
func (UnimplementedPaymentOrchestratorServiceServer) testEmbeddedByValue() {}

// UnsafePaymentOrchestratorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentOrchestratorServiceServer will
// result in compilation errors.
type UnsafePaymentOrchestratorServiceServer interface {
	mustEmbedUnimplementedPaymentOrchestratorServiceServer()
}

func RegisterPaymentOrchestratorServiceServer(s grpc.ServiceRegistrar, srv PaymentOrchestratorServiceServer) {
	// If the following call pancis, it indicates UnimplementedPaymentOrchestratorServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PaymentOrchestratorService_ServiceDesc, srv)
}

func _PaymentOrchestratorService_OrchestratePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrchestratePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentOrchestratorServiceServer).OrchestratePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentOrchestratorService_OrchestratePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentOrchestratorServiceServer).OrchestratePayment(ctx, req.(*OrchestratePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentOrchestratorService_GetPaymentStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentOrchestratorServiceServer).GetPaymentStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PaymentOrchestratorService_GetPaymentStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentOrchestratorServiceServer).GetPaymentStatus(ctx, req.(*GetPaymentStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PaymentOrchestratorService_ServiceDesc is the grpc.ServiceDesc for PaymentOrchestratorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentOrchestratorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rinha.PaymentOrchestratorService",
	HandlerType: (*PaymentOrchestratorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OrchestratePayment",
			Handler:    _PaymentOrchestratorService_OrchestratePayment_Handler,
		},
		{
			MethodName: "GetPaymentStatus",
			Handler:    _PaymentOrchestratorService_GetPaymentStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rinha.proto",
}

const (
	SummaryService_GetSummary_FullMethodName          = "/rinha.SummaryService/GetSummary"
	SummaryService_UpdatePaymentRecord_FullMethodName = "/rinha.SummaryService/UpdatePaymentRecord"
)

// SummaryServiceClient is the client API for SummaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Serviço interno de resumos
type SummaryServiceClient interface {
	GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error)
	UpdatePaymentRecord(ctx context.Context, in *UpdatePaymentRecordRequest, opts ...grpc.CallOption) (*UpdatePaymentRecordResponse, error)
}

type summaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSummaryServiceClient(cc grpc.ClientConnInterface) SummaryServiceClient {
	return &summaryServiceClient{cc}
}

func (c *summaryServiceClient) GetSummary(ctx context.Context, in *GetSummaryRequest, opts ...grpc.CallOption) (*GetSummaryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetSummaryResponse)
	err := c.cc.Invoke(ctx, SummaryService_GetSummary_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *summaryServiceClient) UpdatePaymentRecord(ctx context.Context, in *UpdatePaymentRecordRequest, opts ...grpc.CallOption) (*UpdatePaymentRecordResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdatePaymentRecordResponse)
	err := c.cc.Invoke(ctx, SummaryService_UpdatePaymentRecord_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SummaryServiceServer is the server API for SummaryService service.
// All implementations must embed UnimplementedSummaryServiceServer
// for forward compatibility.
//
// Serviço interno de resumos
type SummaryServiceServer interface {
	GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error)
	UpdatePaymentRecord(context.Context, *UpdatePaymentRecordRequest) (*UpdatePaymentRecordResponse, error)
	mustEmbedUnimplementedSummaryServiceServer()
}

// UnimplementedSummaryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSummaryServiceServer struct{}

func (UnimplementedSummaryServiceServer) GetSummary(context.Context, *GetSummaryRequest) (*GetSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSummary not implemented")
}
func (UnimplementedSummaryServiceServer) UpdatePaymentRecord(context.Context, *UpdatePaymentRecordRequest) (*UpdatePaymentRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePaymentRecord not implemented")
}
func (UnimplementedSummaryServiceServer) mustEmbedUnimplementedSummaryServiceServer() {}
func (UnimplementedSummaryServiceServer) testEmbeddedByValue()                        {}

// UnsafeSummaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SummaryServiceServer will
// result in compilation errors.
type UnsafeSummaryServiceServer interface {
	mustEmbedUnimplementedSummaryServiceServer()
}

func RegisterSummaryServiceServer(s grpc.ServiceRegistrar, srv SummaryServiceServer) {
	// If the following call pancis, it indicates UnimplementedSummaryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SummaryService_ServiceDesc, srv)
}

func _SummaryService_GetSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).GetSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_GetSummary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).GetSummary(ctx, req.(*GetSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SummaryService_UpdatePaymentRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePaymentRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SummaryServiceServer).UpdatePaymentRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SummaryService_UpdatePaymentRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SummaryServiceServer).UpdatePaymentRecord(ctx, req.(*UpdatePaymentRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SummaryService_ServiceDesc is the grpc.ServiceDesc for SummaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SummaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rinha.SummaryService",
	HandlerType: (*SummaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSummary",
			Handler:    _SummaryService_GetSummary_Handler,
		},
		{
			MethodName: "UpdatePaymentRecord",
			Handler:    _SummaryService_UpdatePaymentRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rinha.proto",
}
